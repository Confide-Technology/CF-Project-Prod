import { type NextPage } from "next";
import Head from "next/head";
import { useState, type FormEventHandler } from "react";
import { trpc } from "../utils/trpc";
import { signOut, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Link from "next/link";


interface Document {
  id: string;
  namedocument: string;
  description: string;
  //for handle checkbox
  // completed: boolean;
}

const Document: NextPage = () => {
    const router = useRouter();
    const util = trpc.useContext();
    const [namedocument, setNamedocument] = useState("");
    const [description, setDescription] = useState("");
    const { data: documents = [] } = trpc.document.getAll.useQuery();
    const { data: session, status } = useSession();
    const createDocument = trpc.document.create.useMutation({
      onSuccess() {
        util.document.invalidate();
      },
    });
    const [isEditing, setIsEditing] = useState(false);
    const deleteDocument = trpc.document.delete.useMutation({
      onSuccess() {
        util.document.invalidate();
      },
    });
    const updateDocument = trpc.document.update.useMutation({
      async onSuccess() {
        await util.document.invalidate();
        setIsEditing(false);
      },
    });
  
    const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {
      e.preventDefault();
      await createDocument.mutateAsync({ 
        namedocument, 
        description,
      });
      setNamedocument("");
      setDescription("");

    };

    const handleUpdate: FormEventHandler<HTMLFormElement> = async (e) => {
      e.preventDefault();
      await updateDocument.mutateAsync({
        namedocument,
        description,
      });
    };
    //Checkbox Handle
    // const handleCheckbox = async (bool: boolean) => {
    //   await updateDocument.mutateAsync({
    //     id: document.id,
    //     document: { completed: bool },
    //   });
    // };
  
    const handleDelete = async () => {
      await deleteDocument.mutateAsync({ id: document.id });
    };

  
    if (status == "loading") {
      return <p>Loading ...</p>;
    }
    if (status == "unauthenticated") {
      router.push("/login");
      return <p>Access denied!</p>;
    }

    return (
        <>
        <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen items-center justify-center">
        <div className="absolute top-4 right-4">
          Welcome {session?.user?.email}
          <button
            onClick={() => signOut({ callbackUrl: "/login" })}
            className="ml-4 font-semibold text-purple-800 underline underline-offset-2"
          >
            Logout?
          </button>
        </div>
        <div className="mx-auto w-full px-4 py-8 shadow lg:w-1/3">
          <div className="mb-6 flex items-center">
            <h1 className="mr-6 text-4xl font-bold text-purple-600">
              {" "}
              Create Document
            </h1>
          </div>
          <form onSubmit={handleSubmit} className="relative">
            <input
              type="text"
              placeholder="Document Name"
              value={namedocument}
              onChange={(e) => setNamedocument(e.target.value)}
              className="border-grey-600 w-full rounded border px-2 py-1 outline-none"
            />
            <input
              type="text"
              placeholder="Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="border-grey-600 w-full rounded border px-2 py-1 outline-none"
            />
            
            <button className="bg-purple-600 text-white px-4 py-2 rounded shadow">Create Document</button>
          </form>

          <div>
          <ul className="mt-4">
            {documents.map((document) => (
              <li key={document.id} className="flex items-center justify-between border-b px-2 py-6">
              <span className="inline-block text-gray-600">
                {document.namedocument}
              </span>
              <span className="inline-block text-gray-600">
                {document.description}
              </span>

              <div className="absolute right-0 flex items-center space-x-2">
                <Link href={`/document/${document.id}`}>
                  <button className="bg-purple-600 text-white px-4 py-2 rounded shadow">View</button>
                </Link>
              </div>

              {
                isEditing ? ( 
                  <form onSubmit={handleUpdate} className="inline-block">
                    <input
                      type="text"
                      value={namedocument}
                      onChange={(e) => setNamedocument(e.target.value)}
                      className="border-grey-600 w-full rounded border px-2 py-1 outline-none"
                    />

                    <input 
                      type="text"
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                      className="border-grey-600 w-full rounded border px-2 py-1 outline-none"
                    />

                  </form>
                ) : (
                  <p className="inline-block text-gray-600">
                  </p>
                )
              }
              <div className="absolute right-0 flex items-center space-x-2">
        <button onClick={() => setIsEditing(!isEditing)}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-blue-600"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </button>
        <button onClick={handleDelete}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-red-700"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>

              {/* <div className="absolute right-5 flex items-center space-x-2">
                <button onClick={handleDelete} className="bg-purple-600 text-white px-4 py-2 rounded shadow">Delete</button>
              </div>

              <div className="absolute right-10 flex items-center space-x-2">
                <button onClick={() => setIsEditing(true)} className="bg-purple-600 text-white px-4 py-2 rounded shadow">Edit</button>
              </div>

              <div className="absolute right-15 flex items-center space-x-2">
                <button onClick={() => setIsEditing(false)} className="bg-purple-600 text-white px-4 py-2 rounded shadow">Cancel</button>
              </div> */}

            </li>
            ))}
          </ul>
          </div>

        </div>
        </div>
        </>
    );
  };

export default Document;
